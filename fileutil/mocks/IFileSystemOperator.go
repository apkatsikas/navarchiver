// Code generated by mockery v2.23.4. DO NOT EDIT.

package mocks

import (
	fs "io/fs"

	fileutil "github.com/apkatsikas/archiver/fileutil"

	mock "github.com/stretchr/testify/mock"
)

// IFileSystemOperator is an autogenerated mock type for the IFileSystemOperator type
type IFileSystemOperator struct {
	mock.Mock
}

type IFileSystemOperator_Expecter struct {
	mock *mock.Mock
}

func (_m *IFileSystemOperator) EXPECT() *IFileSystemOperator_Expecter {
	return &IFileSystemOperator_Expecter{mock: &_m.Mock}
}

// CreateFile provides a mock function with given fields: zipFileFullPath
func (_m *IFileSystemOperator) CreateFile(zipFileFullPath string) (fileutil.IArchiveFile, error) {
	ret := _m.Called(zipFileFullPath)

	var r0 fileutil.IArchiveFile
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (fileutil.IArchiveFile, error)); ok {
		return rf(zipFileFullPath)
	}
	if rf, ok := ret.Get(0).(func(string) fileutil.IArchiveFile); ok {
		r0 = rf(zipFileFullPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fileutil.IArchiveFile)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(zipFileFullPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IFileSystemOperator_CreateFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFile'
type IFileSystemOperator_CreateFile_Call struct {
	*mock.Call
}

// CreateFile is a helper method to define mock.On call
//   - zipFileFullPath string
func (_e *IFileSystemOperator_Expecter) CreateFile(zipFileFullPath interface{}) *IFileSystemOperator_CreateFile_Call {
	return &IFileSystemOperator_CreateFile_Call{Call: _e.mock.On("CreateFile", zipFileFullPath)}
}

func (_c *IFileSystemOperator_CreateFile_Call) Run(run func(zipFileFullPath string)) *IFileSystemOperator_CreateFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IFileSystemOperator_CreateFile_Call) Return(_a0 fileutil.IArchiveFile, _a1 error) *IFileSystemOperator_CreateFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IFileSystemOperator_CreateFile_Call) RunAndReturn(run func(string) (fileutil.IArchiveFile, error)) *IFileSystemOperator_CreateFile_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFile provides a mock function with given fields: filePath
func (_m *IFileSystemOperator) DeleteFile(filePath string) error {
	ret := _m.Called(filePath)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(filePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IFileSystemOperator_DeleteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFile'
type IFileSystemOperator_DeleteFile_Call struct {
	*mock.Call
}

// DeleteFile is a helper method to define mock.On call
//   - filePath string
func (_e *IFileSystemOperator_Expecter) DeleteFile(filePath interface{}) *IFileSystemOperator_DeleteFile_Call {
	return &IFileSystemOperator_DeleteFile_Call{Call: _e.mock.On("DeleteFile", filePath)}
}

func (_c *IFileSystemOperator_DeleteFile_Call) Run(run func(filePath string)) *IFileSystemOperator_DeleteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IFileSystemOperator_DeleteFile_Call) Return(_a0 error) *IFileSystemOperator_DeleteFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IFileSystemOperator_DeleteFile_Call) RunAndReturn(run func(string) error) *IFileSystemOperator_DeleteFile_Call {
	_c.Call.Return(run)
	return _c
}

// FileNamesFromPath provides a mock function with given fields: folderPath
func (_m *IFileSystemOperator) FileNamesFromPath(folderPath string) ([]string, error) {
	ret := _m.Called(folderPath)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(folderPath)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(folderPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(folderPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IFileSystemOperator_FileNamesFromPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FileNamesFromPath'
type IFileSystemOperator_FileNamesFromPath_Call struct {
	*mock.Call
}

// FileNamesFromPath is a helper method to define mock.On call
//   - folderPath string
func (_e *IFileSystemOperator_Expecter) FileNamesFromPath(folderPath interface{}) *IFileSystemOperator_FileNamesFromPath_Call {
	return &IFileSystemOperator_FileNamesFromPath_Call{Call: _e.mock.On("FileNamesFromPath", folderPath)}
}

func (_c *IFileSystemOperator_FileNamesFromPath_Call) Run(run func(folderPath string)) *IFileSystemOperator_FileNamesFromPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IFileSystemOperator_FileNamesFromPath_Call) Return(_a0 []string, _a1 error) *IFileSystemOperator_FileNamesFromPath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IFileSystemOperator_FileNamesFromPath_Call) RunAndReturn(run func(string) ([]string, error)) *IFileSystemOperator_FileNamesFromPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetInfo provides a mock function with given fields: path
func (_m *IFileSystemOperator) GetInfo(path string) (fs.FileInfo, error) {
	ret := _m.Called(path)

	var r0 fs.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (fs.FileInfo, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) fs.FileInfo); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fs.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IFileSystemOperator_GetInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInfo'
type IFileSystemOperator_GetInfo_Call struct {
	*mock.Call
}

// GetInfo is a helper method to define mock.On call
//   - path string
func (_e *IFileSystemOperator_Expecter) GetInfo(path interface{}) *IFileSystemOperator_GetInfo_Call {
	return &IFileSystemOperator_GetInfo_Call{Call: _e.mock.On("GetInfo", path)}
}

func (_c *IFileSystemOperator_GetInfo_Call) Run(run func(path string)) *IFileSystemOperator_GetInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IFileSystemOperator_GetInfo_Call) Return(_a0 fs.FileInfo, _a1 error) *IFileSystemOperator_GetInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IFileSystemOperator_GetInfo_Call) RunAndReturn(run func(string) (fs.FileInfo, error)) *IFileSystemOperator_GetInfo_Call {
	_c.Call.Return(run)
	return _c
}

// OpenFile provides a mock function with given fields: filePath
func (_m *IFileSystemOperator) OpenFile(filePath string) (fileutil.IArchiveFile, error) {
	ret := _m.Called(filePath)

	var r0 fileutil.IArchiveFile
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (fileutil.IArchiveFile, error)); ok {
		return rf(filePath)
	}
	if rf, ok := ret.Get(0).(func(string) fileutil.IArchiveFile); ok {
		r0 = rf(filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fileutil.IArchiveFile)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IFileSystemOperator_OpenFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenFile'
type IFileSystemOperator_OpenFile_Call struct {
	*mock.Call
}

// OpenFile is a helper method to define mock.On call
//   - filePath string
func (_e *IFileSystemOperator_Expecter) OpenFile(filePath interface{}) *IFileSystemOperator_OpenFile_Call {
	return &IFileSystemOperator_OpenFile_Call{Call: _e.mock.On("OpenFile", filePath)}
}

func (_c *IFileSystemOperator_OpenFile_Call) Run(run func(filePath string)) *IFileSystemOperator_OpenFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IFileSystemOperator_OpenFile_Call) Return(_a0 fileutil.IArchiveFile, _a1 error) *IFileSystemOperator_OpenFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IFileSystemOperator_OpenFile_Call) RunAndReturn(run func(string) (fileutil.IArchiveFile, error)) *IFileSystemOperator_OpenFile_Call {
	_c.Call.Return(run)
	return _c
}

// ReadFile provides a mock function with given fields: filePath
func (_m *IFileSystemOperator) ReadFile(filePath string) ([]byte, error) {
	ret := _m.Called(filePath)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(filePath)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IFileSystemOperator_ReadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFile'
type IFileSystemOperator_ReadFile_Call struct {
	*mock.Call
}

// ReadFile is a helper method to define mock.On call
//   - filePath string
func (_e *IFileSystemOperator_Expecter) ReadFile(filePath interface{}) *IFileSystemOperator_ReadFile_Call {
	return &IFileSystemOperator_ReadFile_Call{Call: _e.mock.On("ReadFile", filePath)}
}

func (_c *IFileSystemOperator_ReadFile_Call) Run(run func(filePath string)) *IFileSystemOperator_ReadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IFileSystemOperator_ReadFile_Call) Return(_a0 []byte, _a1 error) *IFileSystemOperator_ReadFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IFileSystemOperator_ReadFile_Call) RunAndReturn(run func(string) ([]byte, error)) *IFileSystemOperator_ReadFile_Call {
	_c.Call.Return(run)
	return _c
}

// WriteNewFile provides a mock function with given fields: filePath, data
func (_m *IFileSystemOperator) WriteNewFile(filePath string, data []byte) error {
	ret := _m.Called(filePath, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(filePath, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IFileSystemOperator_WriteNewFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteNewFile'
type IFileSystemOperator_WriteNewFile_Call struct {
	*mock.Call
}

// WriteNewFile is a helper method to define mock.On call
//   - filePath string
//   - data []byte
func (_e *IFileSystemOperator_Expecter) WriteNewFile(filePath interface{}, data interface{}) *IFileSystemOperator_WriteNewFile_Call {
	return &IFileSystemOperator_WriteNewFile_Call{Call: _e.mock.On("WriteNewFile", filePath, data)}
}

func (_c *IFileSystemOperator_WriteNewFile_Call) Run(run func(filePath string, data []byte)) *IFileSystemOperator_WriteNewFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *IFileSystemOperator_WriteNewFile_Call) Return(_a0 error) *IFileSystemOperator_WriteNewFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IFileSystemOperator_WriteNewFile_Call) RunAndReturn(run func(string, []byte) error) *IFileSystemOperator_WriteNewFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewIFileSystemOperator creates a new instance of IFileSystemOperator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIFileSystemOperator(t interface {
	mock.TestingT
	Cleanup(func())
}) *IFileSystemOperator {
	mock := &IFileSystemOperator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
