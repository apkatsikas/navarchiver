// Code generated by mockery v2.23.4. DO NOT EDIT.

package mocks

import (
	fs "io/fs"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// IArchiveFileInfo is an autogenerated mock type for the IArchiveFileInfo type
type IArchiveFileInfo struct {
	mock.Mock
}

type IArchiveFileInfo_Expecter struct {
	mock *mock.Mock
}

func (_m *IArchiveFileInfo) EXPECT() *IArchiveFileInfo_Expecter {
	return &IArchiveFileInfo_Expecter{mock: &_m.Mock}
}

// IsDir provides a mock function with given fields:
func (_m *IArchiveFileInfo) IsDir() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IArchiveFileInfo_IsDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsDir'
type IArchiveFileInfo_IsDir_Call struct {
	*mock.Call
}

// IsDir is a helper method to define mock.On call
func (_e *IArchiveFileInfo_Expecter) IsDir() *IArchiveFileInfo_IsDir_Call {
	return &IArchiveFileInfo_IsDir_Call{Call: _e.mock.On("IsDir")}
}

func (_c *IArchiveFileInfo_IsDir_Call) Run(run func()) *IArchiveFileInfo_IsDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IArchiveFileInfo_IsDir_Call) Return(_a0 bool) *IArchiveFileInfo_IsDir_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IArchiveFileInfo_IsDir_Call) RunAndReturn(run func() bool) *IArchiveFileInfo_IsDir_Call {
	_c.Call.Return(run)
	return _c
}

// ModTime provides a mock function with given fields:
func (_m *IArchiveFileInfo) ModTime() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// IArchiveFileInfo_ModTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModTime'
type IArchiveFileInfo_ModTime_Call struct {
	*mock.Call
}

// ModTime is a helper method to define mock.On call
func (_e *IArchiveFileInfo_Expecter) ModTime() *IArchiveFileInfo_ModTime_Call {
	return &IArchiveFileInfo_ModTime_Call{Call: _e.mock.On("ModTime")}
}

func (_c *IArchiveFileInfo_ModTime_Call) Run(run func()) *IArchiveFileInfo_ModTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IArchiveFileInfo_ModTime_Call) Return(_a0 time.Time) *IArchiveFileInfo_ModTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IArchiveFileInfo_ModTime_Call) RunAndReturn(run func() time.Time) *IArchiveFileInfo_ModTime_Call {
	_c.Call.Return(run)
	return _c
}

// Mode provides a mock function with given fields:
func (_m *IArchiveFileInfo) Mode() fs.FileMode {
	ret := _m.Called()

	var r0 fs.FileMode
	if rf, ok := ret.Get(0).(func() fs.FileMode); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(fs.FileMode)
	}

	return r0
}

// IArchiveFileInfo_Mode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Mode'
type IArchiveFileInfo_Mode_Call struct {
	*mock.Call
}

// Mode is a helper method to define mock.On call
func (_e *IArchiveFileInfo_Expecter) Mode() *IArchiveFileInfo_Mode_Call {
	return &IArchiveFileInfo_Mode_Call{Call: _e.mock.On("Mode")}
}

func (_c *IArchiveFileInfo_Mode_Call) Run(run func()) *IArchiveFileInfo_Mode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IArchiveFileInfo_Mode_Call) Return(_a0 fs.FileMode) *IArchiveFileInfo_Mode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IArchiveFileInfo_Mode_Call) RunAndReturn(run func() fs.FileMode) *IArchiveFileInfo_Mode_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *IArchiveFileInfo) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IArchiveFileInfo_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type IArchiveFileInfo_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *IArchiveFileInfo_Expecter) Name() *IArchiveFileInfo_Name_Call {
	return &IArchiveFileInfo_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *IArchiveFileInfo_Name_Call) Run(run func()) *IArchiveFileInfo_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IArchiveFileInfo_Name_Call) Return(_a0 string) *IArchiveFileInfo_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IArchiveFileInfo_Name_Call) RunAndReturn(run func() string) *IArchiveFileInfo_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function with given fields:
func (_m *IArchiveFileInfo) Size() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// IArchiveFileInfo_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type IArchiveFileInfo_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *IArchiveFileInfo_Expecter) Size() *IArchiveFileInfo_Size_Call {
	return &IArchiveFileInfo_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *IArchiveFileInfo_Size_Call) Run(run func()) *IArchiveFileInfo_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IArchiveFileInfo_Size_Call) Return(_a0 int64) *IArchiveFileInfo_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IArchiveFileInfo_Size_Call) RunAndReturn(run func() int64) *IArchiveFileInfo_Size_Call {
	_c.Call.Return(run)
	return _c
}

// Sys provides a mock function with given fields:
func (_m *IArchiveFileInfo) Sys() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// IArchiveFileInfo_Sys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sys'
type IArchiveFileInfo_Sys_Call struct {
	*mock.Call
}

// Sys is a helper method to define mock.On call
func (_e *IArchiveFileInfo_Expecter) Sys() *IArchiveFileInfo_Sys_Call {
	return &IArchiveFileInfo_Sys_Call{Call: _e.mock.On("Sys")}
}

func (_c *IArchiveFileInfo_Sys_Call) Run(run func()) *IArchiveFileInfo_Sys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IArchiveFileInfo_Sys_Call) Return(_a0 interface{}) *IArchiveFileInfo_Sys_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IArchiveFileInfo_Sys_Call) RunAndReturn(run func() interface{}) *IArchiveFileInfo_Sys_Call {
	_c.Call.Return(run)
	return _c
}

// NewIArchiveFileInfo creates a new instance of IArchiveFileInfo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIArchiveFileInfo(t interface {
	mock.TestingT
	Cleanup(func())
}) *IArchiveFileInfo {
	mock := &IArchiveFileInfo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
