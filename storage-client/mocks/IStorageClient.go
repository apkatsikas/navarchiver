// Code generated by mockery v2.23.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// IStorageClient is an autogenerated mock type for the IStorageClient type
type IStorageClient struct {
	mock.Mock
}

type IStorageClient_Expecter struct {
	mock *mock.Mock
}

func (_m *IStorageClient) EXPECT() *IStorageClient_Expecter {
	return &IStorageClient_Expecter{mock: &_m.Mock}
}

// ReplaceFile provides a mock function with given fields: path, destObject
func (_m *IStorageClient) ReplaceFile(path string, destObject string) error {
	ret := _m.Called(path, destObject)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(path, destObject)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IStorageClient_ReplaceFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplaceFile'
type IStorageClient_ReplaceFile_Call struct {
	*mock.Call
}

// ReplaceFile is a helper method to define mock.On call
//   - path string
//   - destObject string
func (_e *IStorageClient_Expecter) ReplaceFile(path interface{}, destObject interface{}) *IStorageClient_ReplaceFile_Call {
	return &IStorageClient_ReplaceFile_Call{Call: _e.mock.On("ReplaceFile", path, destObject)}
}

func (_c *IStorageClient_ReplaceFile_Call) Run(run func(path string, destObject string)) *IStorageClient_ReplaceFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *IStorageClient_ReplaceFile_Call) Return(_a0 error) *IStorageClient_ReplaceFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IStorageClient_ReplaceFile_Call) RunAndReturn(run func(string, string) error) *IStorageClient_ReplaceFile_Call {
	_c.Call.Return(run)
	return _c
}

// UploadNewFile provides a mock function with given fields: path, destObject
func (_m *IStorageClient) UploadNewFile(path string, destObject string) error {
	ret := _m.Called(path, destObject)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(path, destObject)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IStorageClient_UploadNewFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadNewFile'
type IStorageClient_UploadNewFile_Call struct {
	*mock.Call
}

// UploadNewFile is a helper method to define mock.On call
//   - path string
//   - destObject string
func (_e *IStorageClient_Expecter) UploadNewFile(path interface{}, destObject interface{}) *IStorageClient_UploadNewFile_Call {
	return &IStorageClient_UploadNewFile_Call{Call: _e.mock.On("UploadNewFile", path, destObject)}
}

func (_c *IStorageClient_UploadNewFile_Call) Run(run func(path string, destObject string)) *IStorageClient_UploadNewFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *IStorageClient_UploadNewFile_Call) Return(_a0 error) *IStorageClient_UploadNewFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IStorageClient_UploadNewFile_Call) RunAndReturn(run func(string, string) error) *IStorageClient_UploadNewFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewIStorageClient creates a new instance of IStorageClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIStorageClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IStorageClient {
	mock := &IStorageClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
